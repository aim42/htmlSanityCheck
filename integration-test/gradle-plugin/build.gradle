plugins {
    id 'org.aim42.htmlSanityCheck' version "${htmlSanityCheckVersion}"
    id 'org.asciidoctor.jvm.convert' version '4.0.3'
}

repositories {
    mavenCentral()
}

def projectRoot = "../.."
def sourceDirectory = "src/test/resources"
task copyReadmeResources(type: Copy) {
    from projectRoot
    include '*.properties'
    into "build/docs"
    doLast {
        String linkPath = "build/docs/images"
        java.nio.file.Path target = java.nio.file.Paths.get("../../../../src/docs/images")
        File linkFile = file(linkPath)
        java.nio.file.Path link = linkFile.toPath()
        logger.quiet("Creating symlink from '{}' to '{}'", target, link)
        if (linkFile.exists()) {
            linkFile.delete()
        }
        java.nio.file.Files.createSymbolicLink(link, target)
    }
}

task buildDocs(type: org.asciidoctor.gradle.jvm.AsciidoctorTask) {
    sourceDir sourceDirectory
    sources { include '*.adoc' }
    baseDirFollowsSourceFile()
    outputDir file("build/docs")

    forkOptions JavaVersion.current() >= JavaVersion.VERSION_1_9
            ? { jvmArgs '--add-opens', 'java.base/sun.nio.ch=ALL-UNNAMED',
                        '--add-opens', 'java.base/java.io=ALL-UNNAMED'
              }
            : {}
}

task buildReadmeRoot(type: org.asciidoctor.gradle.jvm.AsciidoctorTask) {
    sourceDir projectRoot
    sources {
        include 'README.adoc'
    }
    baseDirFollowsSourceFile()
    outputDir file("build/docs")
    attributes (
            "imagesdir": "images"
    )
}
buildReadmeRoot.dependsOn(copyReadmeResources)
buildReadmeRoot.dependsOn(buildDocs)

task buildReadmeGradlePlugin(type: org.asciidoctor.gradle.jvm.AsciidoctorTask) {
    sourceDir projectRoot
    sources {
        include 'htmlSanityCheck-gradle-plugin/README.adoc'
    }
    baseDirFollowsSourceFile()
    outputDir file("build/docs")
    attributes (
            "imagesdir": "../images"
    )
}
buildReadmeGradlePlugin.dependsOn(buildReadmeRoot)

htmlSanityCheck {
    sourceDir file("build/docs")

    checkingResultsDir = file("build/reports")
    failOnErrors = true
    retries = 3

    logger.quiet "HSC version: ${htmlSanityCheckVersion}"
    logger.quiet "HSC sourceDir: ${sourceDir.absolutePath}"
    logger.quiet "HSC checkingResultsDir: ${checkingResultsDir.absolutePath}"
}
htmlSanityCheck.dependsOn(buildDocs)
htmlSanityCheck.dependsOn(buildReadmeRoot)
htmlSanityCheck.dependsOn(buildReadmeGradlePlugin)

/*
 * Copyright Gerd Aschemann and aim42 contributors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */
