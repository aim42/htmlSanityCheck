// gradle build script for htmlSanityCheck
// =======================================


buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        jcenter()
    }
}

plugins {
    id 'groovy'
    id 'java'
    id "com.gradle.plugin-publish" version "0.9.10"

    // to report build results back to gradle.org
    id 'com.gradle.build-scan' version '1.15.1'

}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {

    testCompile(
            'junit:junit:4.12',
            'org.codehaus.groovy:groovy-all:2.4.12',
            'org.spockframework:spock-core:1.1-groovy-2.4',
            'com.tngtech.archunit:archunit-junit:0.8.3')

    compile gradleApi()
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.3'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.3'

    // jsoup is our awesome html parser, see jsoup.org
    compile group: 'org.jsoup', name: 'jsoup', version: '1.11.3'


} // dependencies


group = 'org.aim42'
// Set product version if tag is given on CI
System.getenv('TRAVIS_TAG')?.eachMatch(/^[0-9]+(\.[0-9]+)*$/) { m -> project.version = m[0] }


ext {
    srcDir = "$projectDir/src/docs"
    javaVersion = System.getProperty("java.version")
    currentDate = new Date().format("d. MMM yyyy")
}

// tag::BuildPlugins[]
apply plugin: 'groovy'
apply plugin: 'java'

apply plugin: 'java-gradle-plugin'

// The CodeNarc plugin performs quality checks on your projectâ€™s
// Groovy source files using CodeNarc and generates reports from these checks.
apply plugin: 'codenarc'

// publish to gradle-plugin-repository
apply plugin: "com.gradle.plugin-publish"

// publish to (local) maven repo
apply plugin: 'maven-publish'
//apply from: "config/publish-snapshot.gradle"

apply from: 'config/codenarc.gradle'

// end:BuildPlugins[]


task copyResourceImages(type: Copy) {
    from('src/main/resources') {
        include '**/*.png'
    }
    into processResources.destinationDir
}
processResources {
    exclude '**/*.png'
    inputs.property "version", project.version
    filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [version: project.version])
    dependsOn copyResourceImages
    println "after processResources config, version= ${project.version}"
}

// ========================================================


//configure docToolchain to use the main project's config
project('docToolchain') {
    if (project.hasProperty('docDir')) {
        docDir = "../."
    } else {
        println "="*80
        println "  please initialize the docToolchain submodule by executing"
        println "  git submodule update -i"
        println "="*80
    }
}

// ==========================================================
// if you use htmlSanityCheck locally, publish with
// "gradle publishToMavenLocal"


publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId 'org.aim42'
            artifactId project.name
            version project.version
            from components.java
        }

    }
}

// =========================================================

apply from: 'config/buildScan.gradle'

apply from: 'config/publish-gradle-plugin.gradle'


task info(
        description: "info on path and objects"
) {
    doLast
            {
                println "project.name         : " + project.name
                println "version              : " + version
                println "project.version      : " + project.version
                println "project.path         : " + project.path
                println "projectDir           : " + projectDir
                println "groupId              : " + project.group
                println "buildDir             : " + buildDir
                println "targetCompatibility  : " + rootProject.targetCompatibility
                println "=" * 80
            }
}

/*
 * Copyright Gernot Starke and aim42 contributors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */

