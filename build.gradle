// gradle build script for html sanity check
// =========================================

// to process the version-property file, we need the filter
//import org.apache.tools.ant.filters.*


buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        jcenter()
    }
    dependencies {
        classpath "com.gradle.publish:plugin-publish-plugin:0.9.0"
    }
}


plugins {
    id 'com.gradle.build-scan' version '1.0'
    id 'org.asciidoctor.convert' version '1.5.2'
    id "org.sonarqube" version "1.0"
}

group = 'org.aim42'

buildScan {
    licenseAgreementUrl = 'https://gradle.com/terms-of-service'
    licenseAgree = 'yes'
}

ext {
    srcDir = "$projectDir/src/docs"
    javaVersion = System.getProperty("java.version")
    currentDate = new Date().format("d. MMM yyyy")
}


// tag::BuildPlugins[]
apply plugin: 'groovy'
apply plugin: 'java'

apply plugin: 'java-gradle-plugin'

apply plugin: 'build-dashboard'

// asciidoctor conversion
apply plugin: 'org.asciidoctor.convert'

// publish to gradle-plugin-repository
apply plugin: "com.gradle.plugin-publish"

// publish to (local) maven repo
apply plugin: 'maven-publish'
apply from: "config/publish-snapshot.gradle"

// determine test coverate
apply from: "config/coverage.gradle"

// findbugs, jdepend, codenarc
apply from: "config/code-quality.gradle"

// calculate groovy metrics
apply from: "config/gmetrics.gradle"

// dependency analysis
apply plugin: 'codenarc'

// invoke sonar runner
apply from: "config/sonarqube.gradle"
// end:BuildPlugins[]


dependencies {


    localGroovy()
    testCompile("org.spockframework:spock-core:1.0-groovy-2.4")
            { exclude group: 'org.codehaus.groovy'}

    compile gradleApi()
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.3'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.3'

    testCompile 'junit:junit:4.12'

    // jsoup is our awesome html parser, see jsoup.org
    compile group: 'org.jsoup', name: 'jsoup', version: '1.8.2'

} // dependencies


//
tasks.withType(JavaCompile) {
    sourceCompatibility = rootProject.sourceCompatibility
    targetCompatibility = rootProject.targetCompatibility
}
tasks.withType(GroovyCompile) {
    sourceCompatibility = rootProject.sourceCompatibility
    targetCompatibility = rootProject.targetCompatibility
}

processResources {
    inputs.property "version", project.version
    filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [version: project.version])
    println "after processResources, version= ${project.version}"

}
// ========================================================


asciidoctor {
    outputDir = file(buildDir)
    sourceDir = file(srcDir)
    sources {
        include "hsc_arc42.adoc",
                "index.adoc",
                "DevelopmentGuide.adoc"
    }

    attributes = [
            doctype             : 'book',
            icons               : 'font',
            toc                 : 'left',
            sectlink            : true,
            sectanchors         : true,
            numbered            : true,
            'source-highlighter': 'coderay',
            'javaVersion'       : "$javaVersion",
            'currentDate'       : "$currentDate",
            'versionId'         : "$version" ]

    resources {
        from("${srcDir}/images") {
            include '**'
        }
        into "./images"
    }

} // asciidoctor



// ==========================================================
// if you use htmlSanityCheck locally, publish with
// "gradle publishToMavenLocal"


publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId 'org.aim42'
            artifactId project.name
            version project.version
            from components.java
        }

    }
}

// =========================================================


// =========================================================

apply from: 'config/publish-gradle-plugin.gradle'


// =========================================================
task info(
        description: "info on path and objects"
) { doLast
        {
            println "project.name         : " + project.name
            println "version              : " + version
            println "project.version      : " + project.version
            println "project.path         : " + project.path
            println "projectDir           : " + projectDir
            println "groupId              : " + project.group
            println "buildDir             : " + buildDir
            println "targetCompatibility  : " + rootProject.targetCompatibility
            println "="*80
        }
}

task primeCache {
	group = "staging"
    doLast {
      project.rootProject.allprojects.each { subProject ->
          logger.info "Priming ${subProject.name}, configs = ${subProject.buildscript.configurations*.name}"
          subProject.buildscript.configurations*.resolve()
          logger.info "Priming ${subProject.name}, configs = ${subProject.configurations*.name}"
          subProject.configurations*.resolve()
      }
   }
}

/*
 * Copyright 2012-2015 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */
